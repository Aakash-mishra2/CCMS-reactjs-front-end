{"version":3,"file":"static/js/401.c99d9621.chunk.js","mappings":"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","sources":["court/pages/NewCases.js","shared/formElements/Input.js","shared/hooks/form-hook.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport api from \"../../api/ccmsBase\";\r\n\r\nimport Input from \"../../shared/formElements/Input\";\r\nimport Button from \"../../shared/formElements/Button\";\r\nimport Modal from \"../../shared/UIelements/Modal\";\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\r\n\r\nimport './CasesForm.css';\r\nimport '../components/styles/CaseItem.css';\r\nimport ErrorModal from \"../../shared/UIelements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/UIelements/LoadingSpinner\";\r\n\r\nexport default function NewCases() {\r\n    const currentUserId = useSelector((state) => state.userAccount.UserId);\r\n    const currentUserName = useSelector((state) => state.userAccount.userName);\r\n    const [confirmCase, setConfirmCase] = useState(false);\r\n    const [isDescBox, setIsBox] = useState(false);\r\n    const openDescBox = () => { setIsBox(true); }\r\n    const closeDescBox = () => { \r\n        setError(' Application Not Submitted! Recheck your Application and ADD CASE again.')\r\n        setConfirmCase(false); \r\n        setIsBox(false); }\r\n\r\n    const [formState, inputHandler] = useForm({\r\n        aadhar_no: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        courtName: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        caseDesc: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n    }, false\r\n    )\r\n    const caseConfirmation = () => {\r\n        setConfirmCase(prevMode => !prevMode);\r\n    }\r\n\r\n    const [newCase, setNewCase] = useState({\r\n        court: '', description: '', judge: ''\r\n    });\r\n    const [regnSuccess, setSuccess] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const history = useNavigate();\r\n\r\n    const caseSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        setNewCase({\r\n            court: formState.inputs.courtName.value,\r\n            description: formState.inputs.caseDesc.value,\r\n            location_city: 'Delhi',\r\n            location_pincode: 1100998,\r\n            judge: \"To Be Decided\",\r\n            plaintiff: currentUserId,\r\n        });\r\n        openDescBox();\r\n        caseConfirmation();\r\n    };\r\n    const clearError = () => {\r\n        setError(null);\r\n    }\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6}\r\n            variant=\"filled\" {...props} />;\r\n    }\r\n    const submitApplication = async () => {\r\n        caseConfirmation();\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await api.post('/admin/newcase', newCase);\r\n            console.log(response.data.added_NewCase);\r\n            setIsLoading(false);\r\n        }\r\n        catch (err) {\r\n            setIsLoading(false);\r\n            if (err.response) {\r\n                setError(err.response.data.message);\r\n                console.log(err.response.status);\r\n                console.log(error);\r\n            } else {\r\n                setError(err.message);\r\n            }\r\n        }\r\n        setSuccess(true);\r\n        if(error === '') history('/');\r\n    }\r\n\r\nreturn (\r\n    <React.Fragment>\r\n        {regnSuccess && <Alert severity=\"success\" color=\"info\">\r\n            Success! New Case registered. Check out in My Cases tab\r\n        </Alert>}\r\n        <Modal\r\n            show={isDescBox && confirmCase}\r\n            closeBox={closeDescBox}\r\n            header={\"Confirm Your New Case Application \"}\r\n            contentClass=\"case-item__modal-content\"\r\n            footerClass=\"case-item__modal-actions\"\r\n            footer={\r\n                <span>\r\n                    <p style={{ fontSize: 13, textAlign: \"left\" }}> I hereby confirm all above details for my new case application.\r\n                        Correctness of all details while verification is my responsibility. </p>\r\n                    <Button onClick={submitApplication}>SUBMIT</Button>\r\n                    <Button danger onClick={closeDescBox}>GO BACK </Button>\r\n                </span>\r\n            }\r\n        >\r\n            <h5><b>Registered User-ID : </b><tt>{currentUserId}</tt></h5>\r\n            <h4><b>Your Full Name : </b><em>{currentUserName}</em></h4>\r\n            <p><b>Court Name : </b><em>{newCase.court}</em></p>\r\n            <h4><b>Description : </b><em>{newCase.description}</em></h4>\r\n            <p><b>Judge : </b><em>{newCase.judge}</em></p>\r\n        </Modal>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        <form className=\"case-form\" onSubmit={caseSubmitHandler}>\r\n            <Input\r\n                id=\"aadhar_no\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Your AADHAR/ID card no. \"\r\n                placeHolder=\"Enter your Aadhar Card NO. / Voter ID no. \"\r\n                errorText=\"Please Enter a valid no. \"\r\n                validators={[VALIDATOR_MINLENGTH(12)]}\r\n                onInput={inputHandler}\r\n            />\r\n            <Input\r\n                id=\"courtName\"\r\n                element=\"textarea\"\r\n                type=\"text\"\r\n                label=\"Court Name\"\r\n                placeHolder=\"Name of your Court\"\r\n                errorText=\"This is a required field. \"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={inputHandler}\r\n            />\r\n            <Input\r\n                id=\"caseDesc\"\r\n                element=\"textarea\"\r\n                type=\"text\"\r\n                label=\"Case Description\"\r\n                placeHolder=\" Brief Summary of your case Application (200 words ).\"\r\n                errorText=\"This is a required field! Minimum 10 words. \"\r\n                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(10)]}\r\n                onInput={inputHandler}\r\n            />\r\n            <Button type=\"submit\" disabled={!formState.isValid}>ADD CASE</Button>\r\n        </form>\r\n    </React.Fragment>\r\n);\r\n}","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../util/validators\";\r\nimport './Input.css';\r\n\r\nfunction caseReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ALTER':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default function Input(props) {\r\n\r\n    const [inputState, dispatch] = useReducer(caseReducer, {\r\n        isValid: props.initialValid || false,\r\n        value: props.initialValue || '',\r\n        isTouched: false\r\n    })\r\n\r\n    function changeHandler(event) {\r\n        dispatch({\r\n            type: 'ALTER',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    function touchHandler(event) {\r\n        dispatch({\r\n            type: 'TOUCH',\r\n        })\r\n    }\r\n    const { id, onInput } = props;\r\n    const { isValid, value } = inputState;\r\n\r\n    //useEffect(() = > {trigger this action - function  },[when these things change - dependencies])\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, isValid, value, onInput])\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                id={props.id}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n                autoComplete=\"off\"\r\n            />\r\n        ) :\r\n            (\r\n                <textarea\r\n                    type={props.type}\r\n                    placeholder={props.placeholder}\r\n                    id={props.id}\r\n                    rows={props.rows || 3}\r\n                    onChange={changeHandler}\r\n                    onBlur={touchHandler}\r\n                    value={inputState.value}\r\n                    autoComplete=\"off\"\r\n                />\r\n            );\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n                'form-control--invalid'}`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n}","import { useCallback, useReducer } from \"react\";\r\n\r\nfunction parchiPadho(state, action) {\r\n    switch (action.type) {\r\n        case 'bhardiya': {\r\n\r\n            let formIsValid = true;\r\n            let temp;\r\n            for (temp in state.inputs) {\r\n                if (temp === action.id) {\r\n\r\n                    if (!state.inputs[temp]) continue;\r\n\r\n                    formIsValid = formIsValid && action.isValid\r\n                } else\r\n                    formIsValid = formIsValid && state.inputs[temp].isValid;\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.id]: { value: action.val, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        }\r\n\r\n        case 'nayiParchi':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.isValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport function useForm(sareDibbe, initialValidity) {\r\n\r\n    const [formState, parchiBharo] = useReducer(parchiPadho, {\r\n        inputs: sareDibbe,\r\n        isValid: initialValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        parchiBharo({\r\n            type: 'bhardiya',\r\n            val: value,\r\n            isValid: isValid,\r\n            id: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((nayeDibbe, formValidity) => {\r\n        parchiBharo({\r\n            type: 'nayiParchi',\r\n            inputs: nayeDibbe,\r\n            isValid: formValidity\r\n        });\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n}"],"names":["NewCases","currentUserId","useSelector","state","userAccount","UserId","currentUserName","userName","_useState","useState","_useState2","_slicedToArray","confirmCase","setConfirmCase","_useState3","_useState4","isDescBox","setIsBox","closeDescBox","setError","_useForm","useForm","aadhar_no","value","isValid","courtName","caseDesc","_useForm2","formState","inputHandler","caseConfirmation","prevMode","_useState5","court","description","judge","_useState6","newCase","setNewCase","_useState7","_useState8","regnSuccess","setSuccess","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","error","history","useNavigate","caseSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","inputs","location_city","location_pincode","plaintiff","stop","_x","apply","arguments","Alert","props","_jsx","MuiAlert","_objectSpread","elevation","variant","submitApplication","_ref2","_callee2","response","_context2","api","post","sent","console","log","data","added_NewCase","t0","message","status","_jsxs","React","children","severity","color","Modal","show","closeBox","header","contentClass","footerClass","footer","style","fontSize","textAlign","Button","onClick","danger","LoadingSpinner","asOverlay","ErrorModal","onClear","className","onSubmit","Input","id","element","type","label","placeHolder","errorText","validators","VALIDATOR_MINLENGTH","onInput","VALIDATOR_REQUIRE","disabled","caseReducer","action","val","validate","isTouched","_useReducer","useReducer","initialValid","initialValue","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","useEffect","placeholder","onChange","onBlur","autoComplete","rows","concat","htmlFor","parchiPadho","temp","formIsValid","_defineProperty","sareDibbe","initialValidity","parchiBharo","useCallback","nayeDibbe","formValidity"],"sourceRoot":""}