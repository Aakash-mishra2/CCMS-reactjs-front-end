{"version":3,"file":"static/js/613.dce6f858.chunk.js","mappings":"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","sources":["citizens/pages/Authenticate.js","shared/formElements/Input.js","shared/hooks/form-hook.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { login } from \"../../features/UserAccount/loginSlice\";\r\nimport ErrorModal from \"../../shared/UIelements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/UIelements/LoadingSpinner\";\r\nimport api from \"../../api/ccmsBase\";\r\nimport Button from \"../../shared/formElements/Button\";\r\nimport Input from \"../../shared/formElements/Input\";\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport Card from \"../../shared/UIelements/Card\";\r\n\r\nimport \"./Authenticate.css\";\r\nconst Authenticate = () => {\r\n    const [islogin, setIsLogin] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const dispatch = useDispatch();\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            email: { value: \" \", isValid: false },\r\n            password: { value: \" \", isValid: false },\r\n        },\r\n        false\r\n    );\r\n    const switchModeHandler = () => {\r\n        if (!islogin) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    cardNo: undefined,\r\n                },\r\n                formState.inputs.email.isValid && formState.inputs.password.isValid\r\n            );\r\n        } else {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: \" \",\r\n                        isValid: false,\r\n                    },\r\n                    cardNo: {\r\n                        value: \" \",\r\n                        isValid: false,\r\n                    },\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLogin((prevMode) => !prevMode);\r\n    };\r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        if (islogin) {\r\n            const loginUser = {\r\n                email: formState.inputs.email.value,\r\n                password: formState.inputs.password.value,\r\n            };\r\n            try {\r\n                const response = await api.post(\"/public/login\", loginUser);\r\n                setIsLoading(false);\r\n                dispatch(\r\n                    login({\r\n                        id: response.data.citizen.id,\r\n                        name: response.data.citizen.name,\r\n                    })\r\n                );\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n                if (err.response) {\r\n                    setError(err.response.data.message);\r\n                    console.log(err.response.status);\r\n                    console.log(error);\r\n                } else {\r\n                    setError(err.message);\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                const newUser = {\r\n                    email: formState.inputs.email.value,\r\n                    password: formState.inputs.password.value,\r\n                    name: formState.inputs.name.value,\r\n                    idCardNo: formState.inputs.cardNo.value,\r\n                };\r\n\r\n                const response = await api.post(\"/public/signup\", newUser);\r\n                setIsLoading(false);\r\n                dispatch(\r\n                    login({\r\n                        id: response.data.added.id,\r\n                        name: response.data.added.name,\r\n                    })\r\n                );\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n                if (err.response) {\r\n                    setError(err.response.data.message)\r\n                    console.log(err.response.status);\r\n                    console.log(error);\r\n                } else {\r\n                    setError(err.message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <div className=\"loginSection\">\r\n            <Card className=\"authentication\">\r\n                <form onSubmit={submitHandler}>\r\n                    {!islogin && (\r\n                        <Input\r\n                            element=\"input\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={inputHandler}\r\n                            label=\" Enter Name\"\r\n                            placeHolder=\" Enter your full name \"\r\n                            errorText=\"This is required field. Enter valid Name. \"\r\n                        />\r\n                    )}\r\n                    {!islogin && (\r\n                        <Input\r\n                            element=\"input\"\r\n                            id=\"cardNo\"\r\n                            type=\"number\"\r\n                            validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(12)]}\r\n                            onInput={inputHandler}\r\n                            label=\"Your Aadhar-Card/ID no. \"\r\n                            placeHolder=\" Enter your ID card no. s\"\r\n                            errorText=\" This is required field.Min 12 Numbers\"\r\n                        />\r\n                    )}\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"email\"\r\n                        type=\"text\"\r\n                        validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]}\r\n                        onInput={inputHandler}\r\n                        label=\"Your Email address\"\r\n                        placeHolder=\" Enter your email address \"\r\n                        errorText=\" This is required field \"\r\n                    />\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(8)]}\r\n                        onInput={inputHandler}\r\n                        label={islogin ? \"Enter Password\" : \"Create New Password\"}\r\n                        placeHolder=\" Enter your password min 8 digit \"\r\n                        errorText=\" Enter a valid password of 8 digit or more\"\r\n                    />\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        {islogin ? \"LOGIN\" : \"SIGNUP\"}\r\n                    </Button>\r\n                </form>\r\n                <hr />\r\n                <p>\r\n                    <b>\r\n                        <tt>Do not have an accout? Create one!</tt>\r\n                    </b>\r\n                </p>\r\n                <Button onClick={switchModeHandler}>\r\n                    {\" \"}\r\n                    Switch to {islogin ? \"SIGNUP\" : \"LOGIN\"}{\" \"}\r\n                </Button>\r\n            </Card>\r\n            <Card className=\"authentication\">\r\n                <p> Save 10-15 sec of backend server response to create new account.</p>\r\n                <p>Login by default user account instead to view all features of the project. </p>\r\n                <Button danger onClick={() => dispatch(login(\r\n                    {\r\n                        id: \"648db724c8dfa0ec049c6cbd\",\r\n                        name: \"Sharma Ji\"\r\n                    }\r\n                ))\r\n                }\r\n                > FAST LOGIN </Button>\r\n                <hr />\r\n                <p> If you really want us to know that you visited and your use your email to ask for reviews!</p>\r\n                <p> Use the Left One ! </p>\r\n            </Card>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Authenticate;\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../util/validators\";\r\nimport './Input.css';\r\n\r\nfunction caseReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ALTER':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default function Input(props) {\r\n\r\n    const [inputState, dispatch] = useReducer(caseReducer, {\r\n        isValid: props.initialValid || false,\r\n        value: props.initialValue || '',\r\n        isTouched: false\r\n    })\r\n\r\n    function changeHandler(event) {\r\n        dispatch({\r\n            type: 'ALTER',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    function touchHandler(event) {\r\n        dispatch({\r\n            type: 'TOUCH',\r\n        })\r\n    }\r\n    const { id, onInput } = props;\r\n    const { isValid, value } = inputState;\r\n\r\n    //useEffect(() = > {trigger this action - function  },[when these things change - dependencies])\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, isValid, value, onInput])\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                id={props.id}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n                autoComplete=\"off\"\r\n            />\r\n        ) :\r\n            (\r\n                <textarea\r\n                    type={props.type}\r\n                    placeholder={props.placeholder}\r\n                    id={props.id}\r\n                    rows={props.rows || 3}\r\n                    onChange={changeHandler}\r\n                    onBlur={touchHandler}\r\n                    value={inputState.value}\r\n                    autoComplete=\"off\"\r\n                />\r\n            );\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n                'form-control--invalid'}`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n}","import { useCallback, useReducer } from \"react\";\r\n\r\nfunction parchiPadho(state, action) {\r\n    switch (action.type) {\r\n        case 'bhardiya': {\r\n\r\n            let formIsValid = true;\r\n            let temp;\r\n            for (temp in state.inputs) {\r\n                if (temp === action.id) {\r\n\r\n                    if (!state.inputs[temp]) continue;\r\n\r\n                    formIsValid = formIsValid && action.isValid\r\n                } else\r\n                    formIsValid = formIsValid && state.inputs[temp].isValid;\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.id]: { value: action.val, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        }\r\n\r\n        case 'nayiParchi':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.isValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport function useForm(sareDibbe, initialValidity) {\r\n\r\n    const [formState, parchiBharo] = useReducer(parchiPadho, {\r\n        inputs: sareDibbe,\r\n        isValid: initialValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        parchiBharo({\r\n            type: 'bhardiya',\r\n            val: value,\r\n            isValid: isValid,\r\n            id: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((nayeDibbe, formValidity) => {\r\n        parchiBharo({\r\n            type: 'nayiParchi',\r\n            inputs: nayeDibbe,\r\n            isValid: formValidity\r\n        });\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n}"],"names":["_useState","useState","_useState2","_slicedToArray","islogin","setIsLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","dispatch","useDispatch","_useForm","useForm","email","value","isValid","password","_useForm2","formState","inputHandler","setFormData","submitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","loginUser","response","newUser","_response","wrap","_context","prev","next","preventDefault","inputs","api","post","sent","login","id","data","citizen","name","t0","message","console","log","status","idCardNo","cardNo","added","t1","stop","_x","apply","arguments","_jsxs","React","children","_jsx","LoadingSpinner","asOverlay","ErrorModal","onClear","className","Card","onSubmit","Input","element","type","validators","VALIDATOR_REQUIRE","onInput","label","placeHolder","errorText","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","Button","disabled","onClick","_objectSpread","undefined","prevMode","danger","caseReducer","state","action","val","validate","isTouched","props","_useReducer","useReducer","initialValid","initialValue","_useReducer2","inputState","changeHandler","target","touchHandler","useEffect","placeholder","onChange","onBlur","autoComplete","rows","concat","htmlFor","parchiPadho","temp","formIsValid","_defineProperty","sareDibbe","initialValidity","parchiBharo","useCallback","nayeDibbe","formValidity"],"sourceRoot":""}